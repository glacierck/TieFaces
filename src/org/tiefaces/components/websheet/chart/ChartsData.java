/*
 * Copyright 2015 TieFaces.
 * Licensed under MIT
 */
package org.tiefaces.components.websheet.chart;

import java.awt.image.BufferedImage;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.poi.ss.usermodel.ClientAnchor;

/**
 * Collection class for charts data.
 * 
 * @author Jason Jiang
 *
 */
public class ChartsData  {
	/** hold chart data for current display sheet. */
	private Map<String, ChartData> chartDataMap;
	/**
	 * hold charts for current display sheet. each chart is a image generated by
	 * jfreechart.
	 */
	private Map<String, BufferedImage> chartsMap;
	/** hold chart anchor for each chart in current display sheet. */
	private Map<String, ClientAnchor> chartAnchorsMap;
	/**
	 * Index map for chartAnchorsMap. This map's key is chart top left cell
	 * position. e.g. key = Sheet1!A1 value = chartId of chartAnchorsMap.
	 */
	private Map<String, String> chartPositionMap;

	/**
	 * constructor.
	 */
	public ChartsData() {
	}

	/**
	 * return chartdatamap.
	 * 
	 * @return chartdatamap.
	 */
	public final Map<String, ChartData> getChartDataMap() {
		if (this.chartDataMap == null) {
			this.chartDataMap = new HashMap<String, ChartData>();
		}
		return chartDataMap;
	}

	/**
	 * return chartsmap.
	 * 
	 * @return chartsmap.
	 */

	public final Map<String, BufferedImage> getChartsMap() {
		if (this.chartsMap == null) {
			this.chartsMap = new HashMap<String, BufferedImage>();
		}		
		
		return chartsMap;
	}

	/**
	 * return chartanchorsmap.
	 * 
	 * @return chartanchorsmap.
	 */

	public final Map<String, ClientAnchor> getChartAnchorsMap() {
		if (this.chartAnchorsMap == null) {
			this.chartAnchorsMap = new HashMap<String, ClientAnchor>();
		}
		
		return chartAnchorsMap;
	}

	/**
	 * return chartpositionmap.
	 * 
	 * @return chartpositionmap.
	 */
	public final Map<String, String> getChartPositionMap() {
		if (this.chartPositionMap == null) {
			this.chartPositionMap = new HashMap<String, String>();
		}
		
		return chartPositionMap;
	}

	/**
	 * set chartdatamap.
	 * 
	 * @param pchartDataMap
	 *            chartdatamap.
	 */

	public final void setChartDataMap(
			final Map<String, ChartData> pchartDataMap) {
		this.chartDataMap = pchartDataMap;
	}



	/**
	 * set chartanchors map.
	 * 
	 * @param pchartAnchorsMap
	 *            chartanchorsmap.
	 */
	public final void setChartAnchorsMap(
			final Map<String, ClientAnchor> pchartAnchorsMap) {
		this.chartAnchorsMap = pchartAnchorsMap;
	}

	/**
	 * set chartpositionmap.
	 * 
	 * @param pchartPositionMap
	 *            chartpositionmap.
	 */
	public final void setChartPositionMap(
			final Map<String, String> pchartPositionMap) {
		this.chartPositionMap = pchartPositionMap;
	}

}